# Generated by Django 4.2.7 on 2025-09-20 10:56

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('collaborative', 'Collaborative Filtering'), ('content_based', 'Content-Based'), ('hybrid', 'Hybride'), ('popularity', 'Popularité'), ('trending', 'Tendance'), ('frequently_bought_together', 'Achetés ensemble'), ('similar_users', 'Utilisateurs similaires')], max_length=30, verbose_name='type de recommandation')),
                ('score', models.FloatField(default=0.0, verbose_name='score de recommandation')),
                ('reason', models.TextField(blank=True, verbose_name='raison')),
                ('is_shown', models.BooleanField(default=False, verbose_name='affiché')),
                ('is_clicked', models.BooleanField(default=False, verbose_name='cliqué')),
                ('is_purchased', models.BooleanField(default=False, verbose_name='acheté')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='créé le')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='expire le')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='products.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Recommandation',
                'verbose_name_plural': 'Recommandations',
                'ordering': ['-score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecommendationRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='nom')),
                ('rule_type', models.CharField(choices=[('category_based', 'Basée sur la catégorie'), ('brand_based', 'Basée sur la marque'), ('price_based', 'Basée sur le prix'), ('seasonal', 'Saisonnière'), ('cross_sell', 'Vente croisée'), ('upsell', 'Vente incitative')], max_length=20, verbose_name='type de règle')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('conditions', models.JSONField(blank=True, default=dict, verbose_name='conditions')),
                ('actions', models.JSONField(blank=True, default=dict, verbose_name='actions')),
                ('is_active', models.BooleanField(default=True, verbose_name='actif')),
                ('priority', models.PositiveIntegerField(default=0, verbose_name='priorité')),
                ('weight', models.FloatField(default=1.0, verbose_name='poids')),
                ('usage_count', models.PositiveIntegerField(default=0, verbose_name="nombre d'utilisations")),
                ('success_rate', models.FloatField(default=0.0, verbose_name='taux de succès')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='modifié le')),
            ],
            options={
                'verbose_name': 'Règle de recommandation',
                'verbose_name_plural': 'Règles de recommandation',
                'ordering': ['-priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_categories', models.JSONField(blank=True, default=list, verbose_name='catégories préférées')),
                ('preferred_brands', models.JSONField(blank=True, default=list, verbose_name='marques préférées')),
                ('price_range_min', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='prix minimum')),
                ('price_range_max', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='prix maximum')),
                ('total_views', models.PositiveIntegerField(default=0, verbose_name='total vues')),
                ('total_purchases', models.PositiveIntegerField(default=0, verbose_name='total achats')),
                ('total_spent', models.DecimalField(decimal_places=2, default=0, max_digits=12, verbose_name='total dépensé')),
                ('average_order_value', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='panier moyen')),
                ('last_recommendation_update', models.DateTimeField(blank=True, null=True, verbose_name='dernière mise à jour recommandations')),
                ('recommendation_accuracy', models.FloatField(default=0.0, verbose_name='précision des recommandations')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='modifié le')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil de recommandation',
                'verbose_name_plural': 'Profils de recommandation',
            },
        ),
        migrations.CreateModel(
            name='ProductSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_score', models.FloatField(default=0.0, verbose_name='score de similarité')),
                ('similarity_type', models.CharField(default='content_based', max_length=50, verbose_name='type de similarité')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='modifié le')),
                ('product1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_as_product1', to='products.product')),
                ('product2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarities_as_product2', to='products.product')),
            ],
            options={
                'verbose_name': 'Similarité produit',
                'verbose_name_plural': 'Similarités produit',
                'ordering': ['-similarity_score'],
            },
        ),
        migrations.CreateModel(
            name='UserBehavior',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, max_length=40, verbose_name='clé de session')),
                ('object_id', models.PositiveIntegerField()),
                ('behavior_type', models.CharField(choices=[('view', 'Vue'), ('add_to_cart', 'Ajout au panier'), ('remove_from_cart', 'Retrait du panier'), ('add_to_wishlist', 'Ajout aux favoris'), ('remove_from_wishlist', 'Retrait des favoris'), ('purchase', 'Achat'), ('review', 'Avis'), ('share', 'Partage')], max_length=20, verbose_name='type de comportement')),
                ('weight', models.FloatField(default=1.0, verbose_name='poids')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='métadonnées')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='horodatage')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Comportement utilisateur',
                'verbose_name_plural': 'Comportements utilisateur',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'behavior_type'], name='recommendat_user_id_80c006_idx'), models.Index(fields=['session_key', 'behavior_type'], name='recommendat_session_f8d9be_idx'), models.Index(fields=['content_type', 'object_id'], name='recommendat_content_d5148e_idx'), models.Index(fields=['timestamp'], name='recommendat_timesta_6bb024_idx')],
            },
        ),
        migrations.CreateModel(
            name='RecommendationFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('positive', 'Positif'), ('negative', 'Négatif'), ('neutral', 'Neutre')], max_length=10, verbose_name='type de feedback')),
                ('comment', models.TextField(blank=True, verbose_name='commentaire')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='horodatage')),
                ('recommendation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='recommendations.recommendation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_feedback', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Feedback de recommandation',
                'verbose_name_plural': 'Feedbacks de recommandation',
                'ordering': ['-timestamp'],
                'unique_together': {('user', 'recommendation')},
            },
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['user', 'recommendation_type'], name='recommendat_user_id_b12654_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['product', 'recommendation_type'], name='recommendat_product_45bf7f_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['score'], name='recommendat_score_46bfe9_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendation',
            index=models.Index(fields=['created_at'], name='recommendat_created_0cbb1c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='recommendation',
            unique_together={('user', 'product', 'recommendation_type')},
        ),
        migrations.AlterUniqueTogether(
            name='productsimilarity',
            unique_together={('product1', 'product2')},
        ),
    ]
